package vista;

import controlador.UsuarioControlador;
import java.awt.Color;

import java.awt.event.ItemEvent;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import java.security.NoSuchAlgorithmException;
import java.security.MessageDigest;
import java.util.logging.Level;
import java.util.logging.Logger;
import static javax.swing.JOptionPane.ERROR_MESSAGE;
import static javax.swing.JOptionPane.INFORMATION_MESSAGE;
import static javax.swing.JOptionPane.YES_NO_OPTION;
import static javax.swing.JOptionPane.YES_OPTION;
import static javax.swing.JOptionPane.showConfirmDialog;
import static javax.swing.JOptionPane.showMessageDialog;
import javax.swing.table.DefaultTableModel;
import modelo.Usuario;

/**
 *
 * @author Patricia Espínola
 */
public class UsuarioForm extends javax.swing.JDialog {

    /**
     * Creates new form CrearUsuario
     */
    public UsuarioForm(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);
        //establecerBotones("Vacio");
        deshabilitarCampos();
        ocultarColumna();
        txtIdUsuario.setVisible(false);

    }

    public UsuarioForm() {
        initComponents();
        setLocationRelativeTo(null);
        //establecerBotones("Vacio");
        deshabilitarCampos();
        ocultarColumna();
        txtIdUsuario.setVisible(false);
    }

    DefaultTableModel modelo = new DefaultTableModel();
    DefaultComboBoxModel modelCombo = new DefaultComboBoxModel();
    Usuario usuario = new Usuario();
    UsuarioControlador usuarioBD = new UsuarioControlador();

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        lbRol = new javax.swing.JLabel();
        jComboBoxRol = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbUsuario = new javax.swing.JTable(){
            public boolean isCellEditable(int rowIndex, int colIndex) {
                return false; //Disallow the editing of any cell
            }
        };
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtUsuario = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        bEliminar = new javax.swing.JButton();
        bCancelar = new javax.swing.JButton();
        txtApellido = new javax.swing.JTextField();
        bNuevo = new javax.swing.JButton();
        txtContrasenha = new javax.swing.JPasswordField();
        txtEmail = new javax.swing.JTextField();
        bGuardar = new javax.swing.JButton();
        bBuscar = new javax.swing.JButton();
        txtIdUsuario = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Administración de Usuario");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        jLabel1.setText("CREAR USUARIO ");

        jLabel3.setText("Email:");

        jLabel4.setText("Apellido:");

        txtNombre.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtNombre.setNextFocusableComponent(txtApellido);
        txtNombre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNombreKeyTyped(evt);
            }
        });

        lbRol.setText("Rol");

        jComboBoxRol.setNextFocusableComponent(bNuevo);
        jComboBoxRol.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxRolItemStateChanged(evt);
            }
        });

        tbUsuario.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "Apellido", "Usuario", "Correo electrónico", "Rol", "Id", "Contraseña"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbUsuario.setNextFocusableComponent(txtNombre);
        tbUsuario.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbUsuarioMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbUsuario);

        jLabel2.setText("Nombre:");

        jLabel5.setText("Usuario:");

        txtUsuario.setNextFocusableComponent(txtContrasenha);
        txtUsuario.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtUsuarioKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtUsuarioKeyTyped(evt);
            }
        });

        jLabel6.setText("Contraseña");

        bEliminar.setText("Eliminar");
        bEliminar.setNextFocusableComponent(bBuscar);
        bEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bEliminarActionPerformed(evt);
            }
        });

        bCancelar.setText("Cancelar");
        bCancelar.setName(""); // NOI18N
        bCancelar.setNextFocusableComponent(bEliminar);
        bCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bCancelarActionPerformed(evt);
            }
        });

        txtApellido.setNextFocusableComponent(txtUsuario);
        txtApellido.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtApellidoKeyTyped(evt);
            }
        });

        bNuevo.setText("Nuevo");
        bNuevo.setNextFocusableComponent(bGuardar);
        bNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bNuevoActionPerformed(evt);
            }
        });

        txtContrasenha.setNextFocusableComponent(txtEmail);
        txtContrasenha.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtContrasenhaKeyTyped(evt);
            }
        });

        txtEmail.setNextFocusableComponent(jComboBoxRol);
        txtEmail.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtEmailKeyTyped(evt);
            }
        });

        bGuardar.setText("Guardar");
        bGuardar.setNextFocusableComponent(bCancelar);
        bGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bGuardarActionPerformed(evt);
            }
        });

        bBuscar.setText("Buscar");
        bBuscar.setNextFocusableComponent(tbUsuario);
        bBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bBuscarActionPerformed(evt);
            }
        });

        txtIdUsuario.setForeground(new java.awt.Color(255, 255, 255));
        txtIdUsuario.setBorder(null);
        txtIdUsuario.setDisabledTextColor(new java.awt.Color(255, 255, 255));
        txtIdUsuario.setFocusable(false);
        txtIdUsuario.setOpaque(false);
        txtIdUsuario.setRequestFocusEnabled(false);
        txtIdUsuario.setSelectionColor(new java.awt.Color(255, 255, 255));
        txtIdUsuario.setVerifyInputWhenFocusTarget(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(145, 145, 145)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel6)
                            .addComponent(lbRol, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel3)
                            .addComponent(txtIdUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(63, 63, 63)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jComboBoxRol, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(txtApellido)
                                            .addComponent(txtNombre, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE))
                                        .addComponent(txtUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txtContrasenha, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel1))
                                    .addGap(143, 143, 143)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(bCancelar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(bNuevo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(bEliminar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(bGuardar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(bBuscar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(218, 218, 218)))
                        .addGap(0, 34, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)
                        .addGap(2, 2, 2)
                        .addComponent(txtIdUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(19, 19, 19)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(txtApellido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(55, 55, 55)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel6)
                                    .addComponent(txtContrasenha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(9, 9, 9))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(7, 7, 7)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel5)
                                    .addComponent(txtUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(70, 70, 70)
                        .addComponent(bNuevo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(bGuardar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bCancelar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(bEliminar)
                        .addGap(18, 18, 18)
                        .addComponent(bBuscar)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbRol)
                    .addComponent(jComboBoxRol, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(82, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBoxRolItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxRolItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            //rol = (Rol) this.jComboBoxRol.getSelectedItem();  
        }
    }//GEN-LAST:event_jComboBoxRolItemStateChanged

    private void tbUsuarioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbUsuarioMouseClicked
        try {
           
            txtIdUsuario.setText(tbUsuario.getValueAt(tbUsuario.getSelectedRow(), 5).toString());
            txtNombre.setText(tbUsuario.getValueAt(tbUsuario.getSelectedRow(), 0).toString());
            txtApellido.setText(tbUsuario.getValueAt(tbUsuario.getSelectedRow(), 1).toString());
            txtUsuario.setText(tbUsuario.getValueAt(tbUsuario.getSelectedRow(), 2).toString());
            txtContrasenha.setText(tbUsuario.getValueAt(tbUsuario.getSelectedRow(), 6).toString());
            txtEmail.setText(tbUsuario.getValueAt(tbUsuario.getSelectedRow(), 3).toString());
            jComboBoxRol.setSelectedItem(tbUsuario.getValueAt(tbUsuario.getSelectedRow(), 4).toString());

        } catch (Exception ex) {
            Logger.getLogger(UsuarioForm.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_tbUsuarioMouseClicked

    private void bEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bEliminarActionPerformed
        eliminar();
    }//GEN-LAST:event_bEliminarActionPerformed

    private void bCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCancelarActionPerformed
        cancelar();
    }//GEN-LAST:event_bCancelarActionPerformed

    private void bNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bNuevoActionPerformed
        nuevo();
    }//GEN-LAST:event_bNuevoActionPerformed

    private void bGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bGuardarActionPerformed
        guardar();
    }//GEN-LAST:event_bGuardarActionPerformed

    private void bBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bBuscarActionPerformed
        buscar();
    }//GEN-LAST:event_bBuscarActionPerformed

    private void txtUsuarioKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUsuarioKeyPressed
        if (txtNombre.isEnabled() == true) {
            return;
        }
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if ("*".equals(txtUsuario.getText())) {
                
                BuscarForm bf = new BuscarForm(null, true);
                bf.columnas = "idusuario, nombre";
                bf.tabla = "Usuario";
                bf.order = "idusuario";
                bf.filtroBusqueda = "";
                bf.setLocationRelativeTo(this);
                bf.setVisible(true);

                for (int c = 0; c < modelo.getRowCount(); c++) {
                    if (modelo.getValueAt(c, 5).toString().equals(bf.retorno)) {
                        modoBusqueda(false);
                        establecerBotones("Edicion");

                        txtNombre.setText((String) modelo.getValueAt(c, 0));
                        txtApellido.setText((String) modelo.getValueAt(c, 1));
                        txtUsuario.setText((String) modelo.getValueAt(c, 2));
                        txtEmail.setText((String) modelo.getValueAt(c, 3));
                        txtIdUsuario.setText(modelo.getValueAt(c, 5).toString());
                        txtContrasenha.setText((String) modelo.getValueAt(c, 6));

                        try {
                            jComboBoxRol.setSelectedItem(modelo.getValueAt(c, 4));
                        } catch (Exception ex) {
                            showMessageDialog(null, "Combo rol no obtuvo datos", "Error", ERROR_MESSAGE);
                        }

                        return;
                    }
                }
            }
            for (int c = 0; c < modelo.getRowCount(); c++) {
                if (modelo.getValueAt(c, 2).toString().equals(txtUsuario.getText())) {
                    modoBusqueda(false);
                    establecerBotones("Edicion");
                    txtNombre.setText((String) modelo.getValueAt(c, 0));
                    txtApellido.setText((String) modelo.getValueAt(c, 1));
                    txtUsuario.setText((String) modelo.getValueAt(c, 2));
                    txtEmail.setText((String) modelo.getValueAt(c, 3));
                    txtIdUsuario.setText(modelo.getValueAt(c, 5).toString());
                    txtContrasenha.setText((String) modelo.getValueAt(c, 6));

                    try {
                        jComboBoxRol.setSelectedItem(modelo.getValueAt(c, 4));

                    } catch (Exception ex) {
                        showMessageDialog(null, "Combo rol no obtuvo datos", "Error", ERROR_MESSAGE);
                    }

                    return;
                }
            }
        }
    }//GEN-LAST:event_txtUsuarioKeyPressed

    private void getRol() {
        try {
            try (ResultSet rs = usuarioBD.datos()) {

                modelCombo.removeAllElements();

                while (rs.next()) {
                    modelCombo.addElement(rs.getObject("nombre").toString());
                }
                jComboBoxRol.setModel(modelCombo);
            } catch (Exception ex) {
                showMessageDialog(null, ex, "Error", ERROR_MESSAGE);
            }
        } catch (HeadlessException ex) {
            showMessageDialog(null, ex, "Error", ERROR_MESSAGE);
        }
    }

    private void txtNombreKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNombreKeyTyped
        char c = evt.getKeyChar();

        if (Character.isDigit(c)) {
            getToolkit().beep();
            evt.consume();
        }

        if (txtNombre.getText().length() > 19) {
            evt.consume();
        }

    }//GEN-LAST:event_txtNombreKeyTyped

    private void txtApellidoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtApellidoKeyTyped
        char c = evt.getKeyChar();

        if (Character.isDigit(c)) {
            getToolkit().beep();
            evt.consume();
        }

        if (txtApellido.getText().length() > 19) {
            evt.consume();
        }

        
        
    }//GEN-LAST:event_txtApellidoKeyTyped

    private void txtUsuarioKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUsuarioKeyTyped

        if (txtUsuario.getText().length() > 14) {
            getToolkit().beep();
            evt.consume();
        }

       
    }//GEN-LAST:event_txtUsuarioKeyTyped

    private void txtContrasenhaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtContrasenhaKeyTyped

        if (txtContrasenha.getText().length() > 31) {
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_txtContrasenhaKeyTyped

    private void txtEmailKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEmailKeyTyped

        if (txtEmail.getText().length() > 29) {
            getToolkit().beep();
            evt.consume();
        }

       
    }//GEN-LAST:event_txtEmailKeyTyped

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        nuevo();
        getRol();
        txtNombre.requestFocus();
        
        
        
        
    }//GEN-LAST:event_formWindowOpened

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UsuarioForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UsuarioForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UsuarioForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UsuarioForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                UsuarioForm dialog = new UsuarioForm(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bBuscar;
    private javax.swing.JButton bCancelar;
    private javax.swing.JButton bEliminar;
    private javax.swing.JButton bGuardar;
    private javax.swing.JButton bNuevo;
    private javax.swing.JComboBox jComboBoxRol;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbRol;
    private javax.swing.JTable tbUsuario;
    private javax.swing.JTextField txtApellido;
    private javax.swing.JPasswordField txtContrasenha;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtIdUsuario;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtUsuario;
    // End of variables declaration//GEN-END:variables

    private void guardar() {

        if (showConfirmDialog(null, "Está seguro de guardar los datos?", "Confirmar", YES_NO_OPTION) == YES_OPTION) {
            ocultarColumna();

            if (txtIdUsuario.getText().isEmpty() == false) {
                usuario.setIdusuario(Integer.parseInt(txtIdUsuario.getText()));
                System.out.println("ENTRO");
            }
            usuario.setNombre(txtNombre.getText());
            usuario.setApellido(txtApellido.getText());
            usuario.setNombreusuario(txtUsuario.getText());

            usuario.setContrasenha(md5(txtContrasenha.getText()));
            usuario.setEmail(txtEmail.getText());

            try {
                usuario.setIdRol(usuarioBD.getCodigo((String) jComboBoxRol.getSelectedItem()));

            } catch (Exception ex) {
                Logger.getLogger(UsuarioForm.class.getName()).log(Level.SEVERE, null, ex);
            }

            if (txtNombre.getText().trim().isEmpty() == true) {
                showMessageDialog(this, "Campo nombre vacío, por favor ingrese su nombre ", "Atención", JOptionPane.WARNING_MESSAGE);
                return;
            }

            if (txtApellido.getText().trim().isEmpty() == true) {
                showMessageDialog(this, "Campo apellido vacío, por favor ingrese su apellido ", "Atención", JOptionPane.WARNING_MESSAGE);
                return;
            }

            if (txtContrasenha.getText().trim().isEmpty() == true) {
                showMessageDialog(this, "Campo contraseña vacío, por favor ingrese su contraseña ", "Atención", JOptionPane.WARNING_MESSAGE);
                return;
            }

            if (txtEmail.getText().trim().isEmpty() == true) {
                showMessageDialog(this, "Campo correo electrónico vacío, por favor ingrese su correo ", "Atención", JOptionPane.WARNING_MESSAGE);
                return;
            }

            if (jComboBoxRol.getSelectedIndex() == -1) {
                showMessageDialog(null, "Debe seleccionar el rol", "Atención", INFORMATION_MESSAGE);
                return;
            }

            if (bNuevo.isEnabled() == false) {
                try {

                    usuarioBD.insert(usuario);
                    nuevo();
                    //showMessageDialog(null, "Guardado correctamente");
                    getUsuario();

                } catch (Exception ex) {
                    System.out.println("Error al guardar");
                    showMessageDialog(null, ex.getMessage(), "", ERROR_MESSAGE);
                }
            } else {
                try {

                    usuarioBD.update(usuario);
                    showMessageDialog(null, "Actualizado correctamente");
                    limpiar();
                    getUsuario();
                } catch (Exception ex) {
                    showMessageDialog(null, ex, "Error", ERROR_MESSAGE);
                }
            }
        }
    }

    private void eliminar() {
        if (tbUsuario.getSelectedRow() == -1) {
            showMessageDialog(this, "Por favor seleccione una fila", "Atención", JOptionPane.WARNING_MESSAGE);
        }
        if (showConfirmDialog(null, "Está seguro de eliminar los datos?", "Confirmar", YES_NO_OPTION) == YES_OPTION) {
            try {
                usuarioBD.delete(tbUsuario.getValueAt(tbUsuario.getSelectedRow(), 5).toString());
                showMessageDialog(null, "Se eliminó correctamente");
                getUsuario();
            } catch (Exception ex) {
                showMessageDialog(null, ex, "Error", ERROR_MESSAGE);
            }
        }
    }

    private void getUsuario() {
        try {

            tbUsuario.setModel(modelo);

            modelo.setRowCount(0);
            modelo.setColumnCount(0);

            try (ResultSet rs = usuarioBD.consultar()) {
                ResultSetMetaData rsMd = rs.getMetaData();

                int cantidadColumnas = rsMd.getColumnCount();

                //System.out.println("Cantidad columnas "+cantidadColumnas);
                for (int i = 1; i <= cantidadColumnas; i++) {
                    modelo.addColumn(rsMd.getColumnLabel(i));
                }

                while (rs.next()) {
                    Object[] fila = new Object[cantidadColumnas];
                    for (int i = 0; i < cantidadColumnas; i++) {
                        fila[i] = rs.getObject(i + 1);
                    }
                    modelo.addRow(fila);
                }

                ocultarColumna();
            } catch (Exception ex) {
                showMessageDialog(null, ex, "Error", ERROR_MESSAGE);
            }
        } catch (HeadlessException ex) {
            showMessageDialog(null, ex, "Error", ERROR_MESSAGE);
        }

    }

    public static String md5(String input) {

        StringBuffer h = null;

        if (null == input) {
            return null;
        }

        try {
            MessageDigest md = MessageDigest.getInstance("MD5");
            byte[] b = md.digest(input.getBytes());
            h = new StringBuffer(b.length);
            for (int i = 0; i < b.length; i++) {
                int u = b[i] & 255;
                if (u < 16) {
                    h.append("0").append(Integer.toHexString(u));
                } else {
                    h.append(Integer.toHexString(u));
                }
            }

        } catch (NoSuchAlgorithmException e) {
            e.getMessage();
        }
        return h.toString();
    }

    private void cancelar() {

        if (showConfirmDialog(null, "Está seguro de cancelar la operación?", "Confirmar", YES_NO_OPTION) == YES_OPTION) {
            //deshabilitarCampos();
            //txtUsuario.setBackground(Color.white);
            modoBusqueda(false);
            ocultarColumna();
            limpiar();
            getUsuario();
            //modoBusqueda(false);
            establecerBotones("Edicion");
        }
    }

    private void establecerBotones(String modo) {
        switch (modo) {
            case "Nuevo":
                bNuevo.setEnabled(false);
                bEliminar.setEnabled(false);
                bCancelar.setEnabled(true);
                bGuardar.setEnabled(true);
                bBuscar.setEnabled(false);

                break;
            case "Edicion":
                bNuevo.setEnabled(true);
                bEliminar.setEnabled(true);
                bCancelar.setEnabled(false);
                bGuardar.setEnabled(true);
                bBuscar.setEnabled(true);
                break;
            case "Vacio":
                bNuevo.setEnabled(true);
                bEliminar.setEnabled(false);
                bCancelar.setEnabled(false);
                bGuardar.setEnabled(false);
                bBuscar.setEnabled(false);
                break;
            case "Buscar":
                bNuevo.setEnabled(false);
                bEliminar.setEnabled(false);
                bCancelar.setEnabled(true);
                bGuardar.setEnabled(false);
                bBuscar.setEnabled(false);
                break;
        }
    }

    private void ocultarColumna() {

        //oculto columna id
        tbUsuario.getColumnModel().getColumn(5).setMaxWidth(0);
        tbUsuario.getColumnModel().getColumn(5).setMinWidth(0);
        tbUsuario.getColumnModel().getColumn(5).setPreferredWidth(0);

        //oculto columna contrasenha
        tbUsuario.getColumnModel().getColumn(6).setMaxWidth(0);
        tbUsuario.getColumnModel().getColumn(6).setMinWidth(0);
        tbUsuario.getColumnModel().getColumn(6).setPreferredWidth(0);
    }

    private void limpiar() {
        txtApellido.setText("");
        txtNombre.setText("");
        txtContrasenha.setText("");
        txtEmail.setText("");
        txtUsuario.setText("");
        jComboBoxRol.setSelectedIndex(-1);
        txtIdUsuario.setText("");

        if (tbUsuario.getRowCount() == 0) {
            establecerBotones("Vacio");
        }

    }

    private void deshabilitarCampos() {
        txtApellido.setEnabled(false);
        txtContrasenha.setEnabled(false);
        txtEmail.setEnabled(false);
        txtNombre.setEnabled(false);
        txtUsuario.setEnabled(false);
        jComboBoxRol.setEnabled(false);
    }

    private void buscar() {
        limpiar();
        establecerBotones("Buscar");
        modoBusqueda(true);
    }

    private void modoBusqueda(boolean v) {

        if (v == true) {
            txtUsuario.requestFocusInWindow();
            txtUsuario.setBackground(Color.yellow);
            txtApellido.setEnabled(false);
            txtContrasenha.setEnabled(false);
            txtEmail.setEnabled(false);
            txtNombre.setEnabled(false);
            txtUsuario.setEnabled(true);
            jComboBoxRol.setEnabled(false);
            tbUsuario.setEnabled(false);

        } else {

            txtUsuario.setBackground(Color.white);
            txtApellido.setEnabled(true);
            txtContrasenha.setEnabled(true);
            txtEmail.setEnabled(true);
            txtNombre.setEnabled(true);
            txtUsuario.setEnabled(true);
            jComboBoxRol.setEnabled(true);
            tbUsuario.setEnabled(true);

        }
    }

    private void habilitarCampos() {
        txtApellido.setEnabled(true);
        txtContrasenha.setEnabled(true);
        txtEmail.setEnabled(true);
        txtNombre.setEnabled(true);
        txtUsuario.setEnabled(true);
        jComboBoxRol.setEnabled(true);
    }

    private void nuevo() {
        limpiar();
        habilitarCampos();
        establecerBotones("Nuevo");
    }

}
